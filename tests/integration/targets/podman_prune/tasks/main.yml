- name: Create random names
  ansible.builtin.set_fact:
    cname: "{{ 'ansible-container-%0x' % ((2**32) | random) }}"
    nname: "{{ 'ansible-network-%0x' % ((2**32) | random) }}"
    vname: "{{ 'ansible-volume-%0x' % ((2**32) | random) }}"

- name: Test podman_prune module
  block:
    # Create objects to be pruned
    - name: Create container
      containers.podman.podman_container:
        name: "{{ cname }}"
        image: quay.io/podman/hello:latest
        state: present
      register: container
    - name: Create network
      containers.podman.podman_network:
        name: "{{ nname }}"
        state: present
      register: network
    - name: Create volume
      containers.podman.podman_volume:
        name: "{{ vname }}"
        state: present
      register: volume

    # Prune objects
    - name: Prune objects
      containers.podman.podman_prune:
        container: true
        network: true
        volume: true
      register: result

    # Analyze result
    - name: Show results
      ansible.builtin.debug:
        var: result

    - name: Verify assertions for network, container and volume
      ansible.builtin.assert:
        that:
          # containers
          - container.container.Id in result.container.container
          # networks
          - network.network.name in result.network.network
          # volumes
          - volume.volume.Name in result.volume.volume

    # Test with filters
    - name: Prune objects with filters
      containers.podman.podman_prune:
        image: true
        image_filters:
          dangling_only: false
          external: true
      register: image_filters

    - name: Verify assertions for image (with filters)
      ansible.builtin.assert:
        that:
          - image_filters.image.image | length > 0

    - name: Create container
      containers.podman.podman_container:
        name: "{{ cname }}"
        image: quay.io/podman/hello:latest
        state: present
      register: container
    - name: Create network
      containers.podman.podman_network:
        name: "{{ nname }}"
        state: present
      register: network
    - name: Create volume
      containers.podman.podman_volume:
        name: "{{ vname }}"
        state: present
      register: volume

    - name: System prune
      containers.podman.podman_prune:
        system: true
        system_all: true
        system_volumes: true
      register: system_result

    - name: Show results
      ansible.builtin.debug:
        var: system_result

    - name: Verify assertions for system
      ansible.builtin.assert:
        that:
          - system_result.system.system is search("Total reclaimed space")

  always:
    - name: Cleanup
      ansible.builtin.command: podman system prune -a -f --volumes
      ignore_errors: true
